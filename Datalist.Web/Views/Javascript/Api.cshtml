@{
    ViewBag.Title = "Datalist javascript API";
}

<div class="row">
    <div class="widget example col-xl-6">
        <div class="widget-header">
            <div class="fa fa-bars"></div>
            <span>Autocomplete</span>
        </div>
        <div class="widget-content">
            @Html.AutoComplete("Autocomplete", new PeopleDatalist())
        </div>
    </div>
    <div class="widget code col-xl-6">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
        </div>
        <div class="widget-content">
<pre>
<code>@@Html.AutoCompleteFor(model => model.Id, <span class="kwd">new</span> <span class="cls">PeopleDatalist</span>())</code>
</pre>
        </div>
    </div>
</div>

<div class="row">
    <div class="widget example col-xl-6">
        <div class="widget-header">
            <div class="fa fa-bars"></div>
            <span>Datalist</span>
        </div>
        <div class="widget-content">
            @Html.Datalist("Datalist", new PeopleDatalist())
        </div>
    </div>
    <div class="widget code col-xl-6">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
        </div>
        <div class="widget-content">
<pre>
<code>@@Html.DatalistFor(model => model.Id, <span class="kwd">new</span> <span class="cls">PeopleDatalist</span>())</code>
</pre>
        </div>
    </div>
</div>

<div class="row">
    <div class="widget example col-xl-6">
        <div class="widget-header">
            <div class="fa fa-bars"></div>
            <span>Multi datalist</span>
        </div>
        <div class="widget-content">
            @Html.Datalist("MultiDatalist", new PeopleDatalist() { Multi = true })
        </div>
    </div>
    <div class="widget code col-xl-6">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
        </div>
        <div class="widget-content">
<pre>
<code>@@Html.DatalistFor(model => model.Ids, <span class="kwd">new</span> <span class="cls">PeopleDatalist</span>())</code>
</pre>
        </div>
    </div>
</div>

<div class="row">
    <div class="widget code col-xl-6">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>Javascript configuration</span>
        </div>
        <div class="widget-content">
<pre>
<code><span class="kwd">var</span> element = document.querySelector(<span class="str">'.datalist'</span>);
<span class="kwd">var</span> datalist = <span class="kwd">new</span> MvcDatalist(element, {
    readonly: <span class="kwd">false</span>, <span class="com">// Disables datalist if set to true.</span>
    loadingDelay: 300, <span class="com">// The delay period in milliseconds for loading circles to appear.</span>
    searchDelay: 500, <span class="com">// The debounce period in milliseconds for search inputs.</span>
    events: {
        select: <span class="kwd">function</span> (data, triggerChanges) {
            <span class="com">// data - an array of selected data.</span>
            <span class="com">// triggerChanges - a boolean specifying if input change events should be triggered.</span>

            <span class="com">// returning false prevents the default datalist selection logic.</span>
        },
        filterChange: <span class="kwd">function</span> (input) {
            <span class="com">// input - original filter value input, which triggered the event.</span>

            <span class="com">// returning false prevents the default datalist filter check.</span>
        }
    },
    autocomplete: {
        sort: <span class="str">'Income'</span>, <span class="com">// Sort column to be used when querying autocomplete results.</span>
        order: <span class="str">'desc'</span>, <span class="com">// Sort order to be used when sorting autocomplete results.</span>
        minLength: 1, <span class="com">// The minimum number of characters before a search is performed.</span>
        rows: 20 <span class="com">// Number of results to show in autocomplete.</span>
    },
    dialog: {
        preserveSearch: <span class="kwd">true</span>, <span class="com">// Indicates if dialog search value should be preserved after close.</span>
        openDelay: 100, <span class="com">// The time in milliseconds before dialog is opened (to allow data to load).</span>
        rows : {
            min: 1, <span class="com">The minimum allowed value for rows.</span>
            max: 99 <span class="com">The maximum allowed value for rows.</span>
        }
    }
});</code>
</pre>
        </div>
    </div>
    <div class="widget code col-xl-6">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>Javascript methods</span>
        </div>
        <div class="widget-content">
<pre>
<code><span class="kwd">var</span> element = document.querySelector(<span class="str">'.datalist'</span>);

<span class="com">// Initializes new or returns an existing datalist's instance with applied options.</span>
<span class="kwd">var</span> datalist = new MvcDatalist(element[, options]);

datalist.browse(); <span class="com">// Opens datalist dialog for browsing data.</span>

datalist.reload([triggerChanges = <span class="kwd">true</span>]); <span class="com">// Reloads datalist values from the hidden id values.</span>

datalist.selectFirst([triggerChanges = <span class="kwd">true</span>]); <span class="com">// Automatically selects first element.</span>

datalist.selectSingle([triggerChanges = <span class="kwd">true</span>]); <span class="com">// Automatically selects single element only or nothing.</span></code>

datalist.set(options); <span class="com">// Merges and applies newly specified options with the current ones.</span></code>
</pre>
        </div>
    </div>
</div>
